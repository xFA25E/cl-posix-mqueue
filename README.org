#+TITLE: Cl-Posix-Mqueue

Common Lisp bindings to POSIX message queues.  Contributions and questions are
welcome.

POSIX message queue is an IPC (Inter-Process Communication) method that is easy
to use and quick to setup.

* Examples
** Create a queue, send and receive a message, unlink queue.
   #+begin_src lisp
     (with-open-queue (mq "/myqueue" :open-flags '(:read-write :create)
                                     :max-messages 5 :message-size 10)
       ;; Messages are ordered based on priority.  High priority messages are placed
       ;; at the beginning.
       (send-string mq "hello" 4)            ; 4 is priority
       (multiple-value-bind (msg-string priority) (receive-string mq)
         (when (and (string= "hello" msg-string) (= 4 priority))
           (print "It works!"))))
     (unlink "/myqueue")
   #+end_src
** Open existing queue and wait for a message for 1 second
   #+begin_src lisp
     (with-open-queue (mq "/myqueue" :open-flags '(:read-only))
       (multiple-value-bind (msg priority)
           ;; Timestamps are absolute
           (timed-receive-string mq (local-time:timestamp+ (local-time:now) 1 :sec))
         (when (eq :connection-timed-out msg)
           (print "Timed out!"))))
     (unlink "/myqueue")
   #+end_src
** Create a queue, try to receive a message and return immediately because a call would block
   #+begin_src lisp
     (with-open-queue (mq "/myqueue" :open-flags '(:read-only :create :non-blocking))
       (multiple-value-bind (msg priority) (receive-string mq)
         (when (eq :try-again msg)
           (print "Would block!"))))
     (unlink "/myqueue")
   #+end_src
* Usage
  This library uses [[https://common-lisp.net/project/local-time/][local-time]] library for timestamps.  All of the following symbols are
  documented in details through the internal common lisp documentation system.

* Todo
** Features
*** mq_notify
** Polish
*** [#B] try to make environment with sbcl and custom userinit
*** [#C] also test on other lisps
*** publish to quicklisp and awesome-cl
